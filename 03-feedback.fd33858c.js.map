{"mappings":"iiBAIA,IAAAA,EAAAC,EAAA,SAGMC,EAAeC,SAASC,cAAc,kBAGtCC,EAAiBH,EAAaE,cAAc,uBAG5CE,EAAmBJ,EAAaE,cAAc,4BAG9CG,EAAmB,sBAGnBC,EAAgBC,EAAAT,EAAA,EAAS,WAC7B,IAAMU,EAAY,CAChBC,MAAON,EAAeO,MACtBC,QAASP,EAAiBM,OAE5BE,aAAaC,QAAQR,EAAkBS,KAAKC,UAAUP,G,GACrD,KAcuER,EAA7DgB,iBAAiB,QAASV,GAEvCL,SAASe,iBAAiB,oBAbJ,WACpB,IAAMC,EAAaL,aAAaM,QAAQb,GAExC,GAAIY,EAAY,CACd,IAAMT,EAAYM,KAAKK,MAAMF,GAC7Bd,EAAeO,MAAQF,EAAUC,MACjCL,EAAiBM,MAAQF,EAAUG,O,KAUwBX,EAAlDgB,iBAAiB,UAAU,SAAAI,GACtCA,EAAMC,iBAEN,IAAMb,EAAY,CAChBC,MAAON,EAAeO,MACtBC,QAASP,EAAiBM,OAE5BY,QAAQC,IAAI,oBAAoCf,GAGhDI,aAAaY,WAAWnB,GACxBF,EAAeO,MAAQ,GACvBN,EAAiBM,MAAQ,E","sources":["src/js/03-feedback.js"],"sourcesContent":["// нужно сохранять значения полей инпута в локальное хранилище\n// когда пользователь что то напечатал и отправил форму\n\n// импортируем throttle\nimport throttle from 'lodash/throttle';\n\n// получаем доступ к форме\nconst feedbackForm = document.querySelector('.feedback-form');\n\n// получаем доступ к инпуту почты\nconst emailFormInput = feedbackForm.querySelector('input[name=\"email\"]');\n\n//получаем доступ к инпуту сообщения\nconst messageFormInput = feedbackForm.querySelector('textarea[name=\"message\"]');\n\n// создаем локальное хранилище\nconst localStorageInfo = 'feedback-form-state';\n\n// функция для сохранения состаяния формы\nconst saveFormState = throttle(() => {\n  const formState = {\n    email: emailFormInput.value,\n    message: messageFormInput.value,\n  };\n  localStorage.setItem(localStorageInfo, JSON.stringify(formState));\n}, 500);\n\n// функция для загрузки состояния формы\nconst loadFormState = () => {\n  const savedStore = localStorage.getItem(localStorageInfo);\n\n  if (savedStore) {\n    const formState = JSON.parse(savedStore);\n    emailFormInput.value = formState.email;\n    messageFormInput.value = formState.message;\n  }\n};\n\n// обрабатываем событие и вешаем слушателя на инпут, сохраняем инфу в локальное хранилище\nfeedbackForm.addEventListener('input', saveFormState);\n\ndocument.addEventListener('DOMContentLoaded', loadFormState);\n\n// вешаем слушателя события на отправку формы и выводим информацию в консоль\nfeedbackForm.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const formState = {\n    email: emailFormInput.value,\n    message: messageFormInput.value,\n  };\n  console.log('Форма отправлена:', formState);\n\n  // очищаем локальное  хранилище от полей формы\n  localStorage.removeItem(localStorageInfo);\n  emailFormInput.value = '';\n  messageFormInput.value = '';\n});\n"],"names":["$eaxEB","parcelRequire","$b00c40859be242c5$var$feedbackForm","document","querySelector","$b00c40859be242c5$var$emailFormInput","$b00c40859be242c5$var$messageFormInput","$b00c40859be242c5$var$localStorageInfo","$b00c40859be242c5$var$saveFormState","$parcel$interopDefault","formState","email","value","message","localStorage","setItem","JSON","stringify","addEventListener","savedStore","getItem","parse","event","preventDefault","console","log","removeItem"],"version":3,"file":"03-feedback.fd33858c.js.map"}